package com.pty.codingtest.lv1;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

// 2 ≤ id_list의 길이 ≤ 1,000
// 1 ≤ id_list의 원소 길이 ≤ 10

// 1 ≤ report의 길이 ≤ 200,000
// 3 ≤ report의 원소 길이 ≤ 21

// 1 ≤ k ≤ 200, k는 자연수입니다.

// return 하는 배열은 id_list에 담긴 id 순서대로 각 유저가 받은 결과 메일 수를 담으면 됩니다.
// 10초 내로

/*
 * id_list 순서대로 report의 .split(" ")의 두번째 값이 k번 이상일 경우에만 answer에 담아서 return
 */

/*
int[] answer = new int[id_list.length];
Map<String, HashSet<String>> reportMemberList = new HashMap<>();
Map<String, Integer> getMailCnt = new HashMap<>();

for (String id : id_list) {
	getMailCnt.put(id, 0);
	reportMemberList.put(id, new HashSet<>());
}

for (String rp : report) {
	String[] reportTmp = rp.split(" ");
	reportMemberList.get(reportTmp[1]).add(reportTmp[0]);
	

for (String key : reportMemberList.keySet()) {
	HashSet<String> reporters = reportMemberList.get(key);
	
	if (reporters.size() >= k) {
		for (String repoter : reporters) {
			Integer getMail = getMailCnt.get(repoter);
			getMailCnt.put(repoter, getMail+1);
		}
	}
}

for (int i = 0; i< answer.length; i++) {
	answer[i] = getMailCnt.get(id_list[i]);
}

return answer;
 */

public class SingoGyulGwaBatgi_1 {
	public static int[] solution(String[] id_list, String[] report, int k) {
		/*
		 * id_list id를 K, 카운트를 V로 HashMap<String, Integer> : idList 에 넣기
		 * report의 신고당한사람(뒤에거)가 K, 신고한사람(앞에거)이 V (V는 중복이 되면 안됨.. 신고한사람은 신고당한사람을 한번만 신고할 수 있기 때문에)
		 * 그래서 report는 HashMap<String, HashSet<String>> : toReport 에 넣기
		 * toReport의 키 개수만큼 for문 
		 * toReport의 V 사이즈가 k보다 크거나 같으면 진행 if문
		 * toReport의 V 만큼 for문 
		 * 카운트는 integer로해서 idList의 V값인 카운트에 +1
		 * answer에다가 담아서 패스
		 */
		int[] answer = {};
		
		Map<String, Integer> idList = new HashMap<>();
		Map<String, HashSet<String>> toReport = new HashMap<>();
		
		for (String str : id_list) {
			idList.put(str, 0);
			toReport.put(str, new HashSet<>());
		}
		
		for (String str : report) {
			String[] reportTmp = str.split(" ");
			toReport.get(reportTmp[1]).add(reportTmp[0]);
		}
		
		for (String str : toReport.keySet()) {
			if (toReport.get(str).size() >= 2) {
				for (String str2 : toReport.get(str)) {
					Integer cnt = idList.get(str2);
					idList.put(str2, cnt + 1);
				}
			}
		}
		
		answer = new int[id_list.length];
		
		for (int i = 0; i < id_list.length; i++) {
			answer[i] = idList.get(id_list[i]);
		}
		
		return answer;
	}

	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		
		int[] answer;
		String[] id_list = {"muzi", "frodo", "apeach", "neo"};
		String[] report = {"muzi frodo","apeach frodo","frodo neo","muzi neo","apeach muzi"};
		int k = 2;

		answer = solution(id_list, report, k);
		System.out.println(answer[0]);
		System.out.println(answer[1]);
		System.out.println(answer[2]);
		System.out.println(answer[3]);
		System.out.println("-----------------------");

		long finishTime = System.currentTimeMillis();

        System.out.println("elapsedTime(s) : " + (finishTime - startTime)/1000);
	}
	// [2,1,1,0]
	// muzi : prodo, neo > 2
	// frodo : neo > 1
	// apeach : frodo > 1
	// neo : 0
}

//["con", "ryan"]	["ryan con", "ryan con", "ryan con", "ryan con"]	3	[0,0]